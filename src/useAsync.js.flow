// @flow

import { type Computed, type Ref } from '@vue/composition-api';
import type Xhr from './Xhr'

export type UseAsyncReturn<T> = {|
  onError?: ((Error | Object) => any) => any,
  onStart?: (() => any) => any,
  onEnd?: (cb: (res: any) => void) => any,
  isPending: Ref<boolean>,
  error: Ref<?Error | Object>,
  data: Ref<T>,
  reload: () => void,
  promise: Computed<Promise<T>>,
|}

declare export default function useAsync<T>(
  func: (...any) => Promise<T>,
  params?: Ref<any> | any,
  condition?: (Ref<any> | any) => boolean,
): UseAsyncReturn<T>;

// $FlowFixMe - static object in function, when Main.js will be migrated to composition API, will be replaced by inject
useAsync.config = {
  onError(Error) { // eslint-disable-line no-unused-vars
  },
  onStart() {
  },
  onEnd(any) { // eslint-disable-line no-unused-vars
  }
};
