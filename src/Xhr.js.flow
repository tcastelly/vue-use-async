// @flow

export type XhrConfig = $Shape<{|
  url?: string;

  timeout?: ?number;

  port?: ?number;

  params?: Object;

  onStart?: Function;

  onEnd?: Function;

  onProgress?: Function;

  onAbort?: Function;

  onError?: (e: ProgressEvent) => any;

  sendAs?: 'multipart' | 'json';

  token?: string;

  responseType?: 'arraybuffer' | 'blob',
|}>;

export type XhrGet<T = any> = Promise<T> & {|
  abortXhr: Function;
|};

declare export default class Xhr<T: mixed> {
  constructor(paramsObj?: XhrConfig): any;

  static new(paramsObj?: XhrConfig): any;

  removeEvents(): any;

  post(paramsObj: XhrConfig): Promise<any>;

  put(paramsObj: XhrConfig): Promise<any>;

  get(paramsObj?: XhrConfig): XhrGet<T>;

  delete(paramsObj: XhrConfig): Promise<any>;

  abort(): any;

  token: string;

  static stringifyUrl(url: string, params?: Object): any;

  static getFormData(data: Object): any;

  resolve(res: T): Promise<T>;

  reject(res: any): Promise<T>;
}
