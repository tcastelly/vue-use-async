// @flow

import vue from 'vue';
import type { Ref, Computed } from 'vue';
import type Xhr, { XhrConfig } from './Xhr.js.flow';
import type { UseAsyncReturn } from './useAsync.js.flow';
import { Obj } from './index'

type Vue = typeof vue;

type $GetConfig = string | $Shape<{|
  ...XhrConfig,
  ...{|
    cacheDuration?: 'max' | number;
    enabled?: Ref<boolean> | boolean,
  |}
|}>;

export type GetConfig = $GetConfig | Computed<$GetConfig>;

export type GetReturn<T> = {|
  isPending: Computed<boolean>,
  data: Ref<T>,
  error: Ref<Error | Obj | null>,
  abort: () => any,
  promise: Computed<Promise<T>>,
  reload: () => any,
  onError: (cb: (e: Error, xhr: Xhr<T>) => any) => any,
  onStart: (cb: (params: any, xhr: Xhr<T>) => any) => any,
  onEnd: (cb: (res: T, params: any, xhr: Xhr<T>) => any) => any,
  xhr: Xhr<T>,
|}

declare export default function useXhr<U: mixed>(?{|
  context?: Vue,
  legacy?: boolean, // can be used for VueJS 2.x without composition-api
  token?: Ref<?string> | Computed<?string> | ?string,
|}): {
  get: <T>(parametersObj: GetConfig, params?: Object | Ref<Object>, enabled?: Ref<boolean> | boolean) => UseAsyncReturn<T>,
  post: <T>(xhrConfig?: XhrConfig, params?: Object | Ref<Object>) => UseAsyncReturn<T>,
  put: <T>(xhrConfig?: XhrConfig, params?: Object | Ref<Object>) => UseAsyncReturn<T>,
  delete: <T>(xhrConfig?: XhrConfig, params?: Object | Ref<Object>) => UseAsyncReturn<T>,
  xhr: Xhr<U>,
};
