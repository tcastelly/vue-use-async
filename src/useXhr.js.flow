// @flow

import vue from 'vue';
import type { Ref, Computed } from 'vue';
import type Xhr, { XhrConfig } from './Xhr.js.flow';
import type { UseAsyncReturn } from './useAsync.js.flow';

type Vue = typeof vue;

export type GetConfig = string | (XhrConfig & $Shape<{|
  url?: string;

  params?: Object;

  port?: ?number;

  cacheDuration?: 'max' | number;
|}>);

export type GetReturn<T> = {|
  isPending: Computed<boolean>,
  data: Ref<T>,
  error: Ref<?Error>,
  abort: Function,
  promise: Computed<Promise<T>>,
  reload: Function,
  onError: ((Error) => void) => void,
|}

declare export default function useXhr<U: mixed>(?{|
  onError?: (Error) => any,
  context?: Vue,
  legacy?: boolean, // can be used for VueJS 2.x without composition-api
  token?: Ref<?string> | Computed<?string> | ?string,
|}): {
  get: <T>(parametersObj: GetConfig, params?: Object | Ref<Object>) => UseAsyncReturn<T>,
  post: <T>(xhrConfig?: XhrConfig, params?: Object | Ref<Object>) => UseAsyncReturn<T>,
  put: <T>(xhrConfig?: XhrConfig, params?: Object | Ref<Object>) => UseAsyncReturn<T>,
  delete: <T>(xhrConfig?: XhrConfig, params?: Object | Ref<Object>) => UseAsyncReturn<T>,
  xhr: Xhr<U>,
};
